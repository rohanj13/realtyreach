// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealtyReachApi.Data;

#nullable disable

namespace RealtyReachApi.Migrations
{
    [DbContext(typeof(SharedDbContext))]
    [Migration("20250311132602_UpdatedSUburbs")]
    partial class UpdatedSUburbs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobDetailProfessionalType", b =>
                {
                    b.Property<int>("JobDetailsJobDetailId")
                        .HasColumnType("integer");

                    b.Property<int>("ProfessionalTypesProfessionalTypeId")
                        .HasColumnType("integer");

                    b.HasKey("JobDetailsJobDetailId", "ProfessionalTypesProfessionalTypeId");

                    b.HasIndex("ProfessionalTypesProfessionalTypeId");

                    b.ToTable("JobDetailProfessionalType");
                });

            modelBuilder.Entity("RealtyReachApi.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("RealtyReachApi.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RealtyReachApi.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobId"));

                    b.Property<string>("AdditionalDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("JobId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("RealtyReachApi.Models.JobDetail", b =>
                {
                    b.Property<int>("JobDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobDetailId"));

                    b.Property<int>("BudgetMax")
                        .HasColumnType("integer");

                    b.Property<int>("BudgetMin")
                        .HasColumnType("integer");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<string>("JourneyProgress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PurchaseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("SelectedProfessionals")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid[]>("SuggestedProfessionalIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.HasKey("JobDetailId");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("JobDetails", (string)null);
                });

            modelBuilder.Entity("RealtyReachApi.Models.JobProfessionalLink", b =>
                {
                    b.Property<int>("JobDetailId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SelectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("JobDetailId", "ProfessionalId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("JobProfessionalLink");
                });

            modelBuilder.Entity("RealtyReachApi.Models.Professional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ABN")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool?>("FirstLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("text");

                    b.Property<int>("ProfessionalTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("VerificationStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Professionals");
                });

            modelBuilder.Entity("RealtyReachApi.Models.ProfessionalType", b =>
                {
                    b.Property<int>("ProfessionalTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProfessionalTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProfessionalTypeId");

                    b.ToTable("ProfessionalTypes");

                    b.HasData(
                        new
                        {
                            ProfessionalTypeId = 1,
                            Description = "Real Estate Professional representing a buyer",
                            TypeName = "Buyer's Advocate"
                        },
                        new
                        {
                            ProfessionalTypeId = 2,
                            Description = "Real estate brokers",
                            TypeName = "Broker"
                        },
                        new
                        {
                            ProfessionalTypeId = 3,
                            Description = "Legal Professional",
                            TypeName = "Conveyancer"
                        },
                        new
                        {
                            ProfessionalTypeId = 4,
                            Description = "Building and pest inspectors",
                            TypeName = "Build and Pest"
                        });
                });

            modelBuilder.Entity("Suburb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("JobDetailId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobDetailId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Suburbs");
                });

            modelBuilder.Entity("JobDetailProfessionalType", b =>
                {
                    b.HasOne("RealtyReachApi.Models.JobDetail", null)
                        .WithMany()
                        .HasForeignKey("JobDetailsJobDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtyReachApi.Models.ProfessionalType", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalTypesProfessionalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealtyReachApi.Models.Job", b =>
                {
                    b.HasOne("RealtyReachApi.Models.Customer", "Customer")
                        .WithMany("Jobs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RealtyReachApi.Models.JobDetail", b =>
                {
                    b.HasOne("RealtyReachApi.Models.Job", "Job")
                        .WithOne("JobDetails")
                        .HasForeignKey("RealtyReachApi.Models.JobDetail", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("RealtyReachApi.Models.JobProfessionalLink", b =>
                {
                    b.HasOne("RealtyReachApi.Models.JobDetail", "JobDetail")
                        .WithMany("JobProfessionalLinks")
                        .HasForeignKey("JobDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtyReachApi.Models.Professional", "Professional")
                        .WithMany("JobProfessionalLinks")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobDetail");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("RealtyReachApi.Models.Professional", b =>
                {
                    b.HasOne("RealtyReachApi.Models.ProfessionalType", null)
                        .WithMany("Professionals")
                        .HasForeignKey("ProfessionalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Suburb", b =>
                {
                    b.HasOne("RealtyReachApi.Models.JobDetail", null)
                        .WithMany("Suburbs")
                        .HasForeignKey("JobDetailId");

                    b.HasOne("RealtyReachApi.Models.Professional", null)
                        .WithMany("Locations")
                        .HasForeignKey("ProfessionalId");
                });

            modelBuilder.Entity("RealtyReachApi.Models.Customer", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("RealtyReachApi.Models.Job", b =>
                {
                    b.Navigation("JobDetails");
                });

            modelBuilder.Entity("RealtyReachApi.Models.JobDetail", b =>
                {
                    b.Navigation("JobProfessionalLinks");

                    b.Navigation("Suburbs");
                });

            modelBuilder.Entity("RealtyReachApi.Models.Professional", b =>
                {
                    b.Navigation("JobProfessionalLinks");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("RealtyReachApi.Models.ProfessionalType", b =>
                {
                    b.Navigation("Professionals");
                });
#pragma warning restore 612, 618
        }
    }
}
